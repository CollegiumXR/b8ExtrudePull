import bpy
import bmesh
from math import degrees
from mathutils import Vector, kdtree
from bpy_extras import view3d_utils
from bpy.props import StringProperty
import blf
import bgl
from math import sqrt
import numpy as np
from mathutils.geometry import intersect_line_plane
import os
from bpy.props import IntProperty, FloatProperty

from bpy.types import Operator
from math import sin, cos, pi, radians
from time import perf_counter
from bpy.props import (
	BoolProperty,
	FloatProperty,
	EnumProperty, )

bl_info = {
	"name": "Destructive Extrude :)",
	"location": "View3D > Add > Mesh > Destructive Extrude,",
	"description": "Extrude how SketchUp.",
	"author": "Vladislav Kindushov",
	"version": (1, 0, 0),
	"blender": (2, 80, 0),
	"category": "Mesh",
}


def CursorPosition(self,context, is_Set = False):
	if is_Set and self.CursorLocation != 'NONE':
		context.scene.cursor_location = self.CursorLocation
	else:
		self.CursorLocation = context.scene.cursor_location

def CreateNewObject(self,context):
	# ________Duplicate Object________#
	bpy.ops.mesh.duplicate_move()
	bpy.ops.mesh.separate(type='SELECTED')
	bpy.ops.object.mode_set(mode='OBJECT')
	self.ExtrudeObject = context.selected_objects[-1]
	# ________Clear Modifiers________#
	while len(self.ExtrudeObject.modifiers) != 0:
		self.ExtrudeObject.modifiers.remove(self.ExtrudeObject.modifiers[0])

def GetVisualSetings(self,context):
	self.ShowAllEdges = context.active_object.show_all_edges
	self.ShowAllEdges = context.active_object.show_wire

def SetVisualSetings(self,context):
	context.active_object.show_all_edges = True
	context.active_object.show_wire = True

def GetVisualModifiers(self,context):
	for i in self.MainObject.modifiers:
		if i.show_viewport:
			self.VisibilityModifiers.append(i.name)
			i.show_viewport = False

def CreateModifier(self,context):
	#________Set Boolean________#
	context.view_layer.objects.active = self.MainObject
	self.bool = context.object.modifiers.new('DestructiveBoolean', 'BOOLEAN')
	bpy.context.object.modifiers["DestructiveBoolean"].operation = 'DIFFERENCE'
	# ________Set Solidify________#
	context.view_layer.objects.active = self.ExtrudeObject
	context.object.modifiers.new('DestructiveSolidify', 'SOLIDIFY')
	context.object.modifiers['DestructiveSolidify'].use_even_offset = True
	context.object.modifiers['DestructiveSolidify'].offset = -0.99959

def GetMouseLocation(self, event, context):
	region = bpy.context.region
	rv3d = bpy.context.region_data
	coord = event.mouse_region_x, event.mouse_region_y
	view_vector_mouse = view3d_utils.region_2d_to_vector_3d(region, rv3d, coord)
	ray_origin_mouse = view3d_utils.region_2d_to_origin_3d(region, rv3d, coord)

	pointLoc = intersect_line_plane(ray_origin_mouse, ray_origin_mouse @ view_vector_mouse,
									context.object.location, rv3d.view_rotation @ Vector((0.0,0.0,-1.0)),no_flip=False)
	if self.NormalMove:
		return (self.GeneralNormal @ pointLoc) * -1
	else:
		if self.AxisMove == 'X':
			direction = Vector((1.0,0.0,0.0))

		elif self.AxisMove == 'Y':
			direction = Vector((0.0, 1.0, 0.0))

		elif self.AxisMove == 'Z':
			direction = Vector((0.0, 0.0, 1.0))

def SetSolidifyValue(self,context, value):
	self.ExtrudeObject.modifiers[-1].thickness = value

def CalculateNormal(self,context):
	for i in self.ExtrudeObject.data.polygons:
		self.GeneralNormal += i.normal.copy()

def TransformObject(self, context):
	bpy.ops.object.origin_set(type='ORIGIN_GEOMETRY')
	bpy.ops.view3d.snap_cursor_to_selected()
	bpy.context.scene.tool_settings.transform_pivot_point = 'CURSOR'
	bpy.context.scene.tool_settings.transform_pivot_point = 'CURSOR'
	bpy.ops.transform.resize(value=(1.000001, 1.000001, 1.000001))

def GetFaceNormal(self,context):
	for i in self.ExtrudeObject.data.polygons:
		self.FaceNormal.append(i.normal.copy())

def GetMainFaceIndex(self, contex):
	for i in self.ExtrudeObject.data.polygons:
		self.IndexFace.append(i.index.copy())




class DestuctiveExtrude(bpy.types.Operator):
	bl_idname = "mesh.destuctive_extrude"
	bl_label = "Destructive Extrude"
	bl_options = {"REGISTER", "UNDO", "GRAB_CURSOR", "BLOCKING"}

	@classmethod
	def poll(cls, context):
		return (context.mode == "EDIT_MESH")

	def invoke(self,context, event):
		if context.space_data.type == 'VIEW_3D':
			self.MainFaceIndex = []
			self.AxisMove = 'Z'
			self.NormalMove = True
			self.GeneralNormal = Vector((0.0,0.0,0.0))
			self.FaceNormal = []
			self.ShowAllEdges = None
			self.ShowWire = None
			self.CursorLocation = None
			self.VisibilityModifiers=[]
			self.MainObject = context.active_object
			self.ExtrudeObject = None

			GetVisualModifiers(self,context)
			GetVisualSetings(self,context)
			CursorPosition(self,context)
			CreateNewObject(self,context)
			CreateModifier(self,context)
			CalculateNormal(self,context)
			self.StartMouseLocation = GetMouseLocation(self,event, context)



			return {'RUNNING_MODAL'}
		else:
			self.report({'WARNING'}, "is't 3dview")
			return {'CANCELLED'}

	def modal(self, context, event):
		if event.type == 'MOUSEMOVE':
			SetSolidifyValue(self, GetMouseLocation(self,event, context) - self.StartMouseLocation)

		elif event.type == 'LEFTMOUSE':
			return {'FINISHED'}

		elif event.type in {'RIGHTMOUSE', 'ESC'}:
			return {'CANCELLED'}
		return {'RUNNING_MODAL'}

classes = (DestuctiveExtrude)

def register():
	bpy.utils.register_class(classes)


def unregister():
	bpy.utils.unregister_class(classes)


if __name__ == "__main__":
	register()
